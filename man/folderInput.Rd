% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utilities.R
\name{folderInput}
\alias{folderInput}
\title{Folder Upload Control}
\usage{
folderInput(
  inputId,
  label,
  value = NA,
  multiple = FALSE,
  accept = NULL,
  width = NULL,
  style = ""
)
}
\arguments{
\item{inputId}{The \code{input} slot that will be used to access the value.}

\item{label}{Display label for the control, or \code{NULL} for no label.}

\item{value}{Initial value.}

\item{multiple}{Whether the user should be allowed to select and upload
multiple folders at once. \bold{Does not work on older browsers, including
Internet Explorer 9 and earlier.}}

\item{accept}{A character vector of MIME types; gives the browser a hint of
what kind of folders the server is expecting.}

\item{style}{The style attribute for the HTML tag. Used to hide/unhide the progress bar.}

\item{placeholder}{A character string giving the user a hint as to what can be entered into the control. Internet Explorer 8 and 9 do not support this option.}
}
\description{
Create a folder upload control that can be used to upload one or more filepaths pointing to folders. Strongly based on Shiny's File Upload Control.
}
\details{
Whenever a folder upload completes, the corresponding input variable is set
to a character path.
}
\examples{
## Only run examples in interactive R sessions
if (interactive()) {

ui <- fluidPage(
  sidebarLayout(
    sidebarPanel(
      fileInput("file1", "Choose CSV File",
        accept = c(
          "text/csv",
          "text/comma-separated-values,text/plain",
          ".csv")
        ),
      tags$hr(),
      checkboxInput("header", "Header", TRUE)
    ),
    mainPanel(
      tableOutput("contents")
    )
  )
)

server <- function(input, output) {
  output$contents <- renderTable({
    # input$file1 will be NULL initially. After the user selects
    # and uploads a file, it will be a data frame with 'name',
    # 'size', 'type', and 'datapath' columns. The 'datapath'
    # column will contain the local filenames where the data can
    # be found.
    inFile <- input$file1

    if (is.null(inFile))
      return(NULL)

    read.csv(inFile$datapath, header = input$header)
  })
}

shinyApp(ui, server)
}
}
\concept{input elements}
